'''
http://uneex.org/Python/GeoPython2021/Homework_SquareIntersect

В столбик вводятся 2×N целых не равных нулю чисел — координаты левых
верхних вершин квадратов размером 1000×1000 (N>0).

Последовательность заканчивается двумя нулями. Вывести площадь пересечения
всех этих квадратов — области, которая входит в каждый из них.

Оси координат направлены вправо и вниз — это стандартная практика для
компьютерных изображений.

Input:
-10
10
100
100
-300
-200
0
0

Output:
420000
'''

def square_intersect():
    lst = []
    # получаем координаты левых вершин квадратов
    while True:
        x = int(input())
        y = int(input())
        # если введены два 0, то выходим из цикла
        if x == 0 and y == 0:
            # проверяем: если введены только нули, то выводим ошибку
            if len(lst) == 0:
                return 'Error'
            break
        # записываем координаты в список
        else:
            lst.append([x, y])

    # если введены координаты только одного квадрата, то
    # сразу возвращаем его площадь
    if len(lst) == 1:
        return 1000*1000

    # отсортируем список по возрастанию X-координаты
    lst.sort()
    
    # находим минимальные значения координат вершин
    # для смещения точки отсчёта.
    # Для этого принимаем за минимумы X и Y координаты
    # первого квадрата в списке
    min_x = lst[0][0]
    min_y = lst[0][1]
    # проходим по всем парам координат
    for pair in lst[1:]:
        x, y = pair
        #  вычисляем новые минимумы по X и по Y
        if x < min_x:
            min_x = x
        if y < min_y:
            min_y = y

    # сдвигаем все квадраты в правый нижний угол оси координат
    for i in range(len(lst)):
        lst[i][0] -= min_x
        lst[i][1] -= min_y

    # рисуем квадраты и вычисляем площадь пересечения
    # для этого задаём ширину и высоту квадрата
    H, W = 1000, 1000
    # задаём координаты левой верхней точки первого квадрата
    x1, y1 = lst[0][0], lst[0][1]
    # задаём координаты правой нижней точки первого квадрата
    x2, y2 = x1+H, y1+W

    # проходим по всем квадратам и вычисляем площадь пересечения
    for square in lst:
        # для этого берём координаты следующего квадрата
        dx,dy = square
        # и сравниваем, в какую сторону от предыдущего
        # будет рисоваться новый квадрат:

        # по оси X он может рисоваться вправо
        if dx >= x1 and dx < x2:
            # тогда назначаем новую X-координату левого угла
            x1 = dx
        # может рисоваться влево
        elif dx < x1 and dx+H > x1:
            # тогда назначаем новую X-координату правого угла
            x2 = dx+H
        # а если нет пересечения
        else:
            # то выводим ошибку
            return 'Error'
        
        # по оси Y он может рисоваться выше
        if dy >= y1 and dy < y2:
            # тогда назначаем новую Y-координату левого угла
            y1 = dy
        # может рисоваться ниже
        elif dy < y1 and dy+W > y2:
            # тогда назначаем новую Y-координату правого угла
            y2 = dy+W
        # а если нет пересечения
        else:
            # то выводим ошибку
            return 'Error'
    else:
        # выводим площадь пересечения
        return (x2-x1)*(y2-y1)

print(square_intersect())
